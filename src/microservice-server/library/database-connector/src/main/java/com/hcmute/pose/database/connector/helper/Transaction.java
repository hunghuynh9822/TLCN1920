package com.hcmute.pose.database.connector.helper;

import com.hcmute.pose.database.connector.DataSource;
import com.hcmute.pose.database.connector.exception.TransactionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class Transaction {
    private static Logger LOGGER = LoggerFactory.getLogger(Transaction.class);
    private DataSource dataSource;
    private List<PreparedStatement> statements;
    public Transaction(DataSource dataSource){
        this.dataSource = dataSource;
        this.statements = new ArrayList<>();
    }

    public void execute(String sql,Object... args) throws SQLException {
        PreparedStatement ps = dataSource.getConnection().prepareStatement(sql);
        for (int i = 0; i < args.length; i++) {
            ps.setObject(i + 1, args[i]);
        }
        statements.add(ps);
    }

    public void execute(String sql,Integer autoGeneratedKeys,Object... args) throws SQLException {
        PreparedStatement ps = dataSource.getConnection().prepareStatement(sql,autoGeneratedKeys);
        for (int i = 0; i < args.length; i++) {
            ps.setObject(i + 1, args[i]);
        }
        statements.add(ps);
    }

    public void commit() throws SQLException, TransactionException {
        for (PreparedStatement ps:statements
             ) {
            try {
                if(ps.executeUpdate() < 0){
                    throw new TransactionException("No rows affected");
                }
            } catch (SQLException | TransactionException e) {
                LOGGER.error("[Transaction]:[commit] GOT EXCEPTION : ",e);
                try {
                    LOGGER.info("[Transaction]:[commit] Trying to rollback connection ...");
                    this.dataSource.rollback();
                } catch (SQLException ex) {
                    LOGGER.error("[Transaction]:[commit] ROLLBACK GOT EXCEPTION ",e);
                    throw e;
                }
                throw e;
            }finally {
                ps.close();
            }
        }
        this.dataSource.getConnection().commit();
    }
}
